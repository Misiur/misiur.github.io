<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Workbench]]></title><description><![CDATA[Mostly programming stuff]]></description><link>http://misiur.github.io/</link><generator>Ghost 0.5</generator><lastBuildDate>Sat, 27 Feb 2016 14:11:37 GMT</lastBuildDate><atom:link href="http://misiur.github.io/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title><![CDATA[y_groups permissions trick]]></title><description><![CDATA[<p>Let's suppose you have this simple code</p>

<pre><code class="language-pawn">//main.pwn
#include &lt;a_samp&gt;
#include &lt;YSI\y_commands&gt;

main() {}

new  
    Group:LoggedPlayers
;

#include "submodule/impl"

public OnGameModeInit()  
{
    LoggedPlayers = Group_Create("logged");

    return 1;
}


YCMD:login(plyerid, params[], help)  
{
    if (help) return SendClientMessage(playerid, -1, "Login command");

    Group_SetPlayer(LoggedPlayers, playerid, true);
    return SendClientMessage(playerid, -1, "Logged in!");
}
</code></pre>

<pre><code class="language-pawn">//submodule/impl.inc
#include &lt;YSI\y_hooks&gt;

hook OnGameModeInit()  
{
    GROUP_ADD&lt;LoggedPlayers&gt; 
    { 
        @YCMD:foo;
    }

    return 1;
}

YCMD:foo(plyerid, params[], help)  
{
    if (help) return SendClientMessage(playerid, -1, "Foo command");

    return SendClientMessage(playerid, -1, "Only for logged in players!");
}
</code></pre>

<p>Idea is simple, the new module should contain a command available only for players from LoggedPlayers group. You start up your server, connect, and... "Command not found". Why is that?</p>

<p>Due to y_hooks works, hooks are called before the <code>public</code> they are hooking to - so your command permission system fails, as the group doesn't exist when it's called. </p>

<h3 id="howtofixthat">How to fix that?</h3>

<p>We need to create custom public function first</p>

<pre><code class="language-pawn">//main.pwn
forward OnGroupPermissions();  
public OnGroupPermissions() {}  
</code></pre>

<p>Then hook it from our module  </p>

<pre><code class="language-pawn">//submodule/impl.inc
hook OnGroupPermissions()  
{
    GROUP_ADD&lt;LoggedPlayers&gt; 
    { 
        @YCMD:foo;
    }
}
</code></pre>

<p>And finally call it after the group was created  </p>

<pre><code class="language-pawn">//main.pwn
public OnGameModeInit()  
{
    LoggedPlayers = Group_Create("logged");

    CallLocalFunction("OnGroupPermissions", "");

    return 1;
}
</code></pre>

<p>Now every new module can hook <code>OnGroupPermissions</code> and assign group permissions to its commands.</p>]]></description><link>http://misiur.github.io/2016/02/27/y_groups-permissions-trick/</link><guid isPermaLink="false">97118c03-bd8a-49a8-b1c1-e85b9c75c543</guid><category><![CDATA[YSI]]></category><category><![CDATA[y_groups]]></category><category><![CDATA[SA-MP]]></category><category><![CDATA[y_hooks]]></category><dc:creator><![CDATA[Misiur]]></dc:creator><pubDate>Sat, 27 Feb 2016 13:49:07 GMT</pubDate></item><item><title><![CDATA[Y_Less]]></title><description><![CDATA[<h5 id="shouldwebesurprised">Should we be surprised?</h5>

<p>Many moons ago, Y_Less's account suddenly lost status of beta tester. I wondered why, but I wasn't that much concerned, as he created ColeMiner account soon after - I just guessed he wanted to start fresh, just like some people create new account in games when they are bored of being too powerful in relation to everyone around. I didn't connect the dots when his repos dissapeared this time. However, <a href="http://forum.sa-mp.com/showpost.php?p=3431155&amp;postcount=320">his last post shedded some light onto that issue.</a></p>

<p><strong>Addiction is a real problem.</strong> I should know that in particular, as almost everything I touch changes into my new addiction real quick. I've played on sa-mp RP servers in ~2007, I enjoyed it, but my inner programmer told me: <em>"You can do better than this!"</em>. I roamed around polish pawn forums, then discovered official sa-mp forums in 2008 (ironically through foreach thread). Since then, I haven't played, but almost every day checked scripting help subforum, helping people, and looking for contracts. I almost lost my job once to help people for free on scripting help subforum!</p>

<h5 id="wasitreasonable">Was it reasonable?</h5>

<p>From what I've heard, quitting cold turkey is the best method to quit. I'm a smoker, and in my attempts to drop the habit it really was the best option. <strong>Time is the most valuable resource you have</strong>. If addiction steals it from you, then yes, doing anything to stop that is reasonable. Y_Less's legacy is something to envy, he changed servers of many people. His tutorials and patience are really helpful. Thanks to them I understand how PAWN works under the hood. However he trusted a little too much in redundancy, and the act of removing all of his threads was really low. Fortunately none of his works (well, except for some posts and threads) are lost, as he reuploaded them.</p>

<h5 id="whatshouldwedonow">What should we do now?</h5>

<p><a href="http://forum.sa-mp.com/showthread.php?t=570841">With help of many people we managed to restore most of the important threads.</a> Some are lost forever, as caching systems such as google cache and/or wayback machine don't hold everything. All repositories are back up, you can find their corresponding threads throught forums. It seems I'm in charge of YSI as of now (Y_Less is still lurking on github, helping with some issues). However, my knowledge of some things, such as <code>@emit</code> (it's a polymorphic P-code emitter, chaning memory at runtime, not to be confused <code>#emit</code>) is limited. Also, convoluted macros are a real headache to understand (<a href="https://github.com/oscar-broman/ppg">thank god for Slice's PPG</a>). I have a few ideas to upgrade current YSI, however my time is limited. I have a rent to pay, so most of my time I work my dayjob (moved from being webdev to webgl), and I script private samp server gamemodes.</p>

<h5 id="soysiisdead">So, YSI is dead?</h5>

<p>Hey! Just because I have the most recent repository at the moment, doesn't mean it's abandoned! Everyone is welcome to raise issues, submit pull requests, and forking the repo (it's still covered under MPL license). I'm using YSI every day, and I'm more than keen to fix issues in YSI 4.0 (3.0 not so much, as 4.0 is upgrade over 3, BC breaks aren't everywhere). Also, there are over 25 libraries, from which I've personally (and directly) used no more than 20. Everyone can find something for themselves.</p>

<h5 id="conclusion">Conclusion</h5>

<p>Someone said that Y_Less quitting is a good thing, because it had shown us that we can work as a team. I hope we can prove them right. My area of expertise is SQL and pure PAWN, however I have only basic-intermediate knowledge level about C++. Every kind of support is welcome, from adding an issue on github, to becoming owner of the freshest repository and maintainig it.</p>]]></description><link>http://misiur.github.io/2015/04/23/y_lesss-decision/</link><guid isPermaLink="false">55a524e4-2169-45ae-8c8b-9d9114f65756</guid><category><![CDATA[PAWN]]></category><category><![CDATA[YSI]]></category><category><![CDATA[SA-MP]]></category><dc:creator><![CDATA[Misiur]]></dc:creator><pubDate>Thu, 23 Apr 2015 20:22:20 GMT</pubDate></item><item><title><![CDATA[y_groups - combining with sscanf custom parameter for best results]]></title><description><![CDATA[<p>Today we are going to study about <a href="http://forum.sa-mp.com/showthread.php?t=194480">y_groups</a>. "Ok, so I read that topic, what else there is to know?". I'm going to show you how to use that library in the wild in very commonly occuring situation.</p>

<p><strong>Important note: if you are using Zeex's compiler, you have to add <code>-Z+</code> flag, otherwise you'll see error about a_samp not being included before sscanf. Sublime build configuration should now look like this: <code>"${project_base_name}.pwn", "-;+", "-v2", "-d3", "-Z+", "-\\)+"</code></strong></p>

<h5 id="youboremeletsdosomethingalready">You bore me, let's do something already!</h5>

<p>Ok. Let's take a look <a href="https://github.com/Misiur/pawn-turorial/blob/8c600358633c2742c031dbcfab4fac0e85d6a4bc/gamemodes/test.pwn">at our current code</a>. We have two commands: <code>/hello_admins</code> and <code>/hello_admin [id]</code>. We need to check if player we want to greet is logged in, and if he's an admin. </p>

<p><em>Note: For tutorial's simplicity sake everyone who connects is logged in and an admin, your gamemode probably has some OnPlayerLogin handler.</em></p>

<pre><code>YCMD:hello_admin(playerid, params[], help)
{
    if (help) {
        return SendClientMessage(playerid, 0xBADA55, "Says hello to speficied admin");
    }

    new
        target = 0
    ;

    if (sscanf(params, "u", target)) return SendClientMessage(playerid, 0xBADA55, "You dun goof'd");
    if (target == INVALID_PLAYER_ID || !Logged[target] || !AdminLevel[target]) return SendClientMessage(playerid, 0xBADA55, "You dun goof'd");

    SendClientMessage(target, 0xBADA55, "Hello mr admin!");
    SendClientMessage(playerid, 0xBADA55, "You said hello to admins!");

    return 1;
}

YCMD:hello_admins(playerid, params[], help)
{
    if (help) {
        return SendClientMessage(playerid, 0xBADA55, "Says hello to all admins");
    }

    foreach (new player: Player) {
        if (!Logged[player] || !AdminLevel[player]) continue; 

        SendClientMessage(player, 0xBADA55, "Hello mr admin!");
    }

    SendClientMessage(playerid, 0xBADA55, "You said hello to admins!");

    return 1;
}
</code></pre>

<h5 id="whyyouwanttotouchthatiamusingitanditsperfect">Why you want to touch that, I am using it and it's perfect!</h5>

<p>We're talking about how YSI can make your life simpler, remember? <br>
I'll start with showing you <a href="https://github.com/Misiur/pawn-turorial/blob/24fa8213c142b94ef59ccdd7a43699df59f9c9dc/gamemodes/test.pwn">our final code</a>, and we'll dig through it step by step.</p>

<pre><code>CreateGroups()
{
    Users = Group_Create("Logged in players");

    for (new i = MAX_ADMIN_LEVEL - 1; i &gt;= 0; --i) {
        Admins[i] = Group_Create(adminRanks[i]);

        if (i == MAX_ADMIN_LEVEL - 1) continue;

        Group_AddChild(Admins[i + 1], Admins[i]);
    }

    //Only logged in users can be admins!
    Group_AddChild(Users, Admins[0]);
}

ToggleDefaultGroups(playerid, bool:mode = true)
{
    Group_SetPlayer(Admins[MAX_ADMIN_LEVEL / 3], playerid, mode);
}
</code></pre>

<p>We no longer need <code>Logged</code> array to keep track of logged in users, and <code>Admins</code> group replaces our <code>AdminLevel</code> array. Also as you can see we have cool chain of parent groups</p>

<pre><code>`Users` -&gt; `Admins[0]` -&gt; ... `Admins[4]` 
</code></pre>

<p>If someone leaves parent group, he's no longer in descendant groups. If you wanted to create closed admin conference for selected admins, just create a group which is a child of <code>Admins[X]</code>, and loop just through those admins. Awesome stuff!</p>

<p>Restricting commands to specific group is themost common usage, but I won't be covering it, <a href="http://forum.sa-mp.com/showthread.php?t=194480">as it's already been done</a>. But we'll push automatisation a little further. <br>
Very often you have to check if target player is a member of some specific group. Ok, let's do just that</p>

<pre><code> if (sscanf(params, "u", target) || target == INVALID_PLAYER_ID) return SendClientMessage(playerid, 0xBADA55, "You dun goof'd");
 if (!Group_GetPlayer(Admins[0], target)) return SendClientMessage(playerid, 0xBADA55, "You dun goof'd");
</code></pre>

<p>Neat, we know that target player is logged in and is an admin of rank at least of 1 (inheritance is wonderful!).</p>

<h5 id="yousaidsomethingaboutsscanf">You said something about sscanf?</h5>

<p>Yup. Are you familiar with <a href="https://github.com/Y-Less/sscanf/wiki/" k"-specifier"="">"kustom" parameters?</a> What if we could reduce our group checks to minimum? Using that, we <em>k</em>an! (that sucked, sorry)</p>

<pre><code>if (sscanf(params, "k&lt;admin&gt;", target) || target == INVALID_PLAYER_ID) return SendClientMessage(playerid, 0xBADA55, "You dun goof'd");

//(...)

SSCANF:admin(string[])
{
    new
        id = strval(string),
        bool:isAdmin = IsAdmin(id)
    ;

    return isAdmin ? id : INVALID_PLAYER_ID;
}
</code></pre>

<p>Wicked, isn't it?</p>

<p>Thanks for reading.</p>]]></description><link>http://misiur.github.io/2015/03/23/y_groups-making-factions-in-sa-mp-has-never-been-easier/</link><guid isPermaLink="false">6497b4a7-abd9-4925-89cc-5912c6269f89</guid><category><![CDATA[YSI]]></category><category><![CDATA[y_groups]]></category><category><![CDATA[sscanf]]></category><dc:creator><![CDATA[Misiur]]></dc:creator><pubDate>Mon, 23 Mar 2015 21:46:44 GMT</pubDate></item><item><title><![CDATA[Y_iterate, y_hooks, y_utils and best coding practices case study]]></title><description><![CDATA[<p>I wanted to show you that even in simple cases you can improve your gamemode using y_iterate, also how to improve existing code. I'll be starting from very terrible code state and improve it step by step.</p>

<p><strong>Disclaimer:</strong> Between commits there are random updated lines - that's my fault as I made some mistakes writing this code (note that latest commit is fully tested). But still, this is not code to be used in real life as <a href="https://github.com/MrMEEE/bumblebee-Old-and-abbandoned/commit/a047be85247755cdbe0acce6f1dafc8beb84f2ac">this wondeful example of why you can't hide your mistakes using git</a>. </p>

<p><a href="https://github.com/Misiur/pawn-turorial/tree/c2e14ecf7a29ebfaa4b2e9a476e8754c4efbbd36">First stop: Terrible code.</a></p>

<h6 id="whatswrongwithititworks">What's wrong with it? It works!</h6>

<p>That might be true, but let's assume you wanted to add more available houses. What then? Or if you wanted to allow longer house names - what then? Let's take a look.</p>

<p><a href="https://github.com/Misiur/pawn-turorial/commit/a77e8572ff6e6550b1b0997cc457a30875302a99">Constants inbound.</a></p>

<p>First of all. Really common mistake coders make, is to assume that to hold player name you need <code>MAX_PLAYER_NAME</code> size. As you probably already know, strings are a special type of array. A word <code>tank</code> is 4 characters, so 4 cells should suffice?</p>

<p>In reality that's an array <code>{'t', 'a', 'n', 'k', 0}</code> consiting of <strong>5</strong> cells. Functions like <code>strlen</code> need to know when string ends - they end when they find <code>NUL</code> character - which value is <code>0</code>. So, if player name can have 25 (<code>MAX_PLAYER_NAME</code>) characters, you need <code>MAX_PLAYER_NAME + 1</code> to keep the <code>NUL</code> character as well. </p>

<p><code>House[300][E_HOUSE]</code> - it works, that's fine. But if you have to loop through all houses, you have to check the size of this array, and then do something like <code>for (new house = 0; house != 300; ++house)</code>. Ok, fine, but if you wanted to increase maximum allowed houses, you'd have to find all instances of 300 in context of houses, and replace them. So, just declare a new define <code>#define MAX_HOUSES 300</code>, use <code>MAX_HOUSES</code> instead of 300, and suddenly all you have to change is this single definition value.</p>

<p>As you might've already noticed, <code>sizeof</code> used on enum field will not work as you'd want it to work. This makes working with strings really confusing, because functions like <code>format</code>, <code>strcat</code>, <code>strlen</code>, and similar will fail. So, we defined a new definition called <code>MAX_HOUSE_NAME</code>. And again, all you have to worry about is this single line.</p>

<p><a href="https://github.com/Misiur/pawn-turorial/commit/04a68b9c67cc91365b2f0b4864f7901c24ea39c9">Step 2: Arrays instead of numbered variables.</a></p>

<pre><code>enum E_PLAYER
{
    pdbID,
    pName[MAX_PLAYER_NAME + 1],
    pHouse1,        
    pHouse2        
 }
</code></pre>

<p>This particular set up is a plague. Weapon slots, player cars, player houses created as a numbered variable - I've seen it all. All the time you have to check <code>pHouse1</code> and <code>pHouse2</code>. Also if you'd want to add new player house, you'd have to add additional field in database, find all places where you use that variables and add another clause. Not too handy, because there are more flexible ways of doing that stuff.</p>

<pre><code>mysql_format(handle, query, sizeof query, "SELECT p.*, ph.house_id FROM players p LEFT JOIN player_houses ph ON ph.player_id = p.id WHERE p.name = '%e' LIMIT 1", Player[playerid][pName]);
</code></pre>

<p>This is sql specific example (I'm not going to dig into sql explaining, as it's another complex language with thousands of awesome tutorials online, but check <a href="http://blog.codinghorror.com/a-visual-explanation-of-sql-joins/">this out for visual explanation of joins</a>), but now you can use single query to fetch all player houes at the same time as player data! Saved your time and effort.</p>

<p>As you can see I've also included <code>y_utils</code>. Why? It contains useful functions such as <a href="http://forum.sa-mp.com/showpost.php?p=1612209&amp;postcount=4"><code>strcpy</code></a> and <a href="http://forum.sa-mp.com/showpost.php?p=1606781&amp;postcount=2852"><code>memset</code></a></p>

<p><a href="https://github.com/Misiur/pawn-turorial/commit/e36fb75cb6ad13b92610fdd72866541be48f2a51">Optional step 2A.</a></p>

<p>If you just want to check if house is preowned, you don't need additional field in database just to store that, use previously mentioned power of SQL to achieve that. </p>

<p><a href="https://github.com/Misiur/pawn-turorial/commit/c0329ad2e3be2d06bd0a08d68ac95989b185a7e1">Step 3: Offline player names.</a></p>

<p>I've seen a lot of half-baked solutions, like opening all player files, or separate query just to fetch offline player names owning their houses. With <br>
<code>mysql_tquery(handle, "SELECT h.*, p.name AS player_name FROM houses h LEFT JOIN player_houses ph ON ph.house_id = h.id LEFT JOIN players p ON p.id = ph.player_id", "OnHousesLoaded");</code> you just fetched all houses and their owner names. Awesome! </p>

<p><a href="https://github.com/Misiur/pawn-turorial/commit/50e3ea79b63b44fcb039dc66ee2bbc64a3a787a0">Step 4: House indexes.</a></p>

<p>Ok, previously we've fetched houses database id, but everytime we'd need house array index, we'd have to loop through all houses and check if player house database id is equal to that of a house. Not ideal. So, just reassign value of house database id to current array index. Works perfectly. This is the ceiling of how much we can get using stock pawn functions. </p>

<p><a href="https://github.com/Misiur/pawn-turorial/commit/c42472e4ebcb02fe5de10eb0ea987dda9b7fec4f">Step 4: Add y_iterate.</a></p>

<p>Your functions work, everything is good, but sometimes house functions lag, especially if you have thousands of houses. What to do about it? Use y_iterate! Now instead of looping through all house/player house slots, you'll only iterate through taken slots. Time saved and lag reduced: a lot.</p>

<p><a href="https://github.com/Misiur/pawn-turorial/commit/74bc0419f99978dbada37d26f81710846474cea1">Step 5: Separation of concerns, aka SRP - Single Responsibility Principle.</a></p>

<p>You've probably already seen people boasting about how their gamemode has 400k lines. If they're happy with it, I'm glad. However if you want to edit/disable a specific functionality you have to dig through all those lines. That's a nightmare, I can tell you that. So, we'll separate our player and house functionalities into separate files. Using y_hooks is as simple as that, all you have to do is to <code>#include &lt;YSI\y_hooks&gt;</code> and automagically you can separate files across files and even filterscripts! <a href="https://github.com/Misiur/pawn-turorial/tree/74bc0419f99978dbada37d26f81710846474cea1">Full layout to be browsed here</a>.</p>

<p><a href="https://github.com/Misiur/pawn-turorial/commit/22de9dd88d06d297d8d834dfcf4e8b6e45735585">Step 6: Logic coupling using y_inline.</a></p>

<p>This one is semi-optional, but the source of my example uses blueg mysql plugin, and y<em>dialogs (using y</em>inline) tutorial is in production. As you can see, now you don't have to create separate <code>public</code> function to handle threaded query response. I'm not certain, but inline functions might be faster than normal public callbacks!</p>

<h4 id="conclusion">Conclusion</h4>

<p>If your code made any mistakes like this example crooked code, rethink if you want to commit them anymore. You can make life of yours and other developers easier. That applies especially to you if intend to release your gamemode to other people.</p>]]></description><link>http://misiur.github.io/2015/03/13/y_iterate-y_hooks-y_utils-and-best-coding-practices-case-study/</link><guid isPermaLink="false">a2d2a272-32e6-4e52-9ff9-e70342b386ba</guid><category><![CDATA[PAWN]]></category><category><![CDATA[Tutorials]]></category><dc:creator><![CDATA[Misiur]]></dc:creator><pubDate>Thu, 12 Mar 2015 23:54:42 GMT</pubDate></item><item><title><![CDATA[y_iterate aka foreach - what is it, and how to use it]]></title><description><![CDATA[<p>As I mentioned previously, we'll start our journey with YSI at y_iterate. Before I even joined sa-mp forums, I knew of foreach. It's trivial in use, but only handful of people know how it works, and even less use other iterators than <code>Players</code>. <a href="http://forum.sa-mp.com/showthread.php?t=92679">Y_Less had already written quite detailed description of this include, refer to it for API.</a></p>

<h5 id="whyforeachisfasterthanstandardplayerloop">Why foreach is faster than standard player loop?</h5>

<p>Normally you would have to loop <code>MAX_PLAYERS</code> times, then use <code>IsPlayerConnected</code> to determine whether player is on server. Then come additional checks, like whether player is registered, logged in, etc. YSI has a solution for that, <code>y_groups</code>, which I will cover in upcoming tutorial. Anyway, what y_iterate does, is simply to hook to <code>OnPlayerConnect</code> callback, then add player to <code>Players</code> iterator, and then remove player from it on <code>OnPlayerDisconnect</code> (you can adjust settings for bots using defines before including y_iterate).  </p>

<h5 id="butarraysinpawnarestatichowonearthwouldyouknowwhentostoplooping">But arrays in PAWN are static, how on earth would you know when to stop looping?</h5>

<p>Remember that <code>Players</code> is an iterator. You can write one yourself, so let's do just that:</p>

<pre><code>#include &lt;YSI\y_iterate&gt;
//(...)
new
    Iterator:Foobar&lt;10&gt;
;
</code></pre>

<p>Pawn compiler has three stages: preprocessing - substituting all <code>#define</code> in code, then first compiler pass, then second one. Y_iterate magic happens during preprocessor pass. If you want to see what happens then, <a href="https://gist.github.com/Misiur/1ab20c95fb8dfe9007a1">download modified <code>PAWN.sublime-build</code></a>. Now press <code>ctrl+shift+p</code>, type <code>build list</code>, and select <code>Build: List file</code>. In your gamemodes there should appear new file <code>&lt;project name&gt;.lst</code>. Open it. Scroll all the way down. Now you should see something like</p>

<pre><code>new
    _Y_ITER_C9:Foobar@YSII_Cg,Foobar@YSII_Ag[(10)+1]={(10)*2,(10)*2-1,...}
;
</code></pre>

<p>What the hell does it mean? Let's make it a little bit more human-readable:</p>

<pre><code>new
    _Y_ITER_C9:Foobar@YSII_Cg,
    Foobar@YSII_Ag[(10)+1]={(10)*2,(10)*2-1,...}
;
</code></pre>

<p><code>_Y_ITER_C9</code> Is <a href="http://wiki.sa-mp.com/wiki/Scripting_Basics#Tags">a tag</a>, don't worry about that. <code>Foobar@YSII_Cg</code> is a variable keeping count of how much items we have in our <code>Foobar@YSII_Ag</code> iterator. That's it, we don't need to know more. </p>

<h5 id="coolwealreadyknewthatfromoriginaltutorialwhatnow">Cool, we already knew that from original tutorial. What now?</h5>

<p>I think the reason why people don't use y_iterate, is because they don't know where to use it. We'll do a real life example - loading data from database. Let's say houses. I'll use <a href="http://forum.sa-mp.com/showthread.php?t=56564">blueg mysql plugin</a>, but don't panic, I'll create a tutorial for that in time. In my database I have 3 houses, however this is just an example, so all they contain is the house name. <a href="https://github.com/Misiur/pawn-turorial/tree/bf41a9f860bdb7c9399f5586adf81d7d2b70d602">Github repository for this example</a>.</p>

<pre><code>#include &lt;a_samp&gt;
#include &lt;a_mysql&gt;
#include &lt;YSI\y_iterate&gt;

forward LoadHousesCallback();

#define MAX_HOUSES 10
#define MAX_HOUSE_NAME (32 + 1)

enum E_HOUSE
{
    hdbID,
    hName[MAX_HOUSE_NAME]
}

new
    handle,
    Iterator:Houses&lt;MAX_HOUSES&gt;,
    Houses[MAX_HOUSES][E_HOUSE]
;

public OnGameModeInit()
{
    handle = mysql_connect("localhost", "root", "test", "");
    //Do some handle checking first!

    LoadHouses();
}

LoadHouses()
{
    mysql_tquery(handle, "SELECT * FROM houses", "LoadHousesCallback");
}

public LoadHousesCallback()
{
    new
        rows = cache_get_row_count(handle)
    ;

    if (!rows) return print("It seems there are no house rows, sorry");

    for (new row = 0; row != rows; ++row) 
    {
        if (row == MAX_HOUSES) {
            printf("Number of houses in your database (%d) is larger than " #MAX_HOUSES " slots can handle", rows);

            //We can't load remaining rows :(
            break;
        }

        Houses[row][hdbID] = cache_get_field_content_int(row, "id", handle);
        cache_get_field_content(row, "name", Houses[row][hName], handle, MAX_HOUSE_NAME);
        Iter_Add(Houses, row);
    }

    foreach(new house : Houses) {
        printf("%d. DbID %d, name %s", house + 1, Houses[house][hdbID], Houses[house][hName]);
    }

    return 1;
}

public OnGameModeExit()
{
    mysql_close(handle);

    return 1;
}

main() {
}
</code></pre>

<p>That's quite a chunk of code, but we'll go through it step by step. </p>

<pre><code>    mysql_tquery(handle, "SELECT * FROM houses", "LoadHousesCallback");
</code></pre>

<p>We request all houses from our database, and when they're fetched, please call <code>LoadHousesCallback</code>. </p>

<pre><code> if (row == MAX_HOUSES) {
     printf("Number of houses in your database (%d) is larger than " #MAX_HOUSES " slots can handle", rows);

     //We can't load remaining rows :(
     break;
 }
</code></pre>

<p>It seems there are too many rows to load from database, and we have only <code>MAX_HOUSES</code> slots. That's unfortunate (but, in the future we'll use y_malloc to handle this).</p>

<pre><code> Houses[row][hdbID] = cache_get_field_content_int(row, "id", handle);
 cache_get_field_content(row, "name", Houses[row][hName], handle, MAX_HOUSE_NAME);
 &gt;&gt;&gt; Iter_Add(Houses, row);
</code></pre>

<p>This is where magic happens, we add our newly loaded house to our iterator. That's it, nothing more is reuqired.</p>

<pre><code>foreach(new house : Houses) {
    printf("%d. DbID %d, name %s", house + 1, Houses[house][hdbID], Houses[house][hName]);
}
</code></pre>

<p>As you can see we can use our <code>Houses</code> iterator, and it works just fine. And, even though we specifiec that <code>MAX_HOUSES</code> can handle 100 slots, this foreach will run only <strong>3</strong> times. How cool is that?</p>

<h5 id="onesecondyounamedyouriteratorexactlylikeyourarrayhow">One second, you named your iterator exactly like your array. How?</h5>

<p>It's simple, go back a few paragraphs. <code>Iterator:</code> is just a macro, so we have a new array, and a variable:</p>

<pre><code>new
    _Y_ITER_C9:Houses@YSII_Cg,
    Houses@YSII_Ag[(100)+1]={(100)*2,(100)*2-1,...}
;
</code></pre>

<p>So, in fact we have 3 different names: <code>Houses</code>, <code>Houses@YSII_Cg</code>, and <code>Houses@YSII_Ag</code>. It's really handy for us!.  </p>

<h5 id="conclusion">Conclusion</h5>

<p>That's it! I have shown you how to handle y_iterate in real world. I guess there are many question marks on your mind, but become a programmer - try, until something works. Or just ask me - either here in comments, or create a new thread in scripting help. After we'll go through mysql plugin and y_iterate, I'll show you more real-life usages of y_iterate.</p>

<p>Cheers</p>]]></description><link>http://misiur.github.io/2015/03/07/y_iterate-aka-foreach-what-is-it-and-how-to-use-it/</link><guid isPermaLink="false">ce643410-e09f-4fe7-b2d3-147a3d6070d4</guid><category><![CDATA[PAWN]]></category><category><![CDATA[Sublime Text 3]]></category><category><![CDATA[Tutorials]]></category><dc:creator><![CDATA[Misiur]]></dc:creator><pubDate>Sat, 07 Mar 2015 20:59:18 GMT</pubDate></item><item><title><![CDATA[Getting ready for YSI]]></title><description><![CDATA[<p>Writing a gamemode from scratch can be a long and tedious process (I should know, as I've started writing one in 2008, and lost all my progress because of a hd format... VCS is really important!). That's why you should rely on proven solutions. Welcome to the world of <a href="https://github.com/Y-Less/YSI">YSI</a>.  </p>

<h4 id="whatisysi">What is YSI?</h4>

<p>It's a collection of open source libraries written by <a href="http://y-less.com">Y_Less</a>. You don't have to know anything about how they work internally, they <em>Just Work</em> &trade;. Most popular library is <strong>y_iterate</strong>, formerly known as <strong>foreach</strong>. YSI alone contains <strong>44</strong> libraries, ranging from colour definition helpers, to complete player account system. You don't have to use all libraries, however whole YSI package is required as some of them are interdependent.  </p>

<h4 id="motivation">Motivation</h4>

<p>Y_Less usually releases a topic describing what the specific library does with simple example and is eager to help in <a href="http://forum.sa-mp.com/forumdisplay.php?f=12">sa-mp scripting help subforum</a> (I spend a lot of time there too). However the knowledge is scrambled, questions are repeated over and over again, people request real-life examples, and the wiki is <a href="http://ysi.wikia.com/wiki/YSI_Wiki">not yet complete</a>. If you know your way around YSI, feel free to contribute there, there's even a <a href="http://forum.sa-mp.com/showthread.php?t=387086">bug bounty</a> for your input! I don't like contributing to wikis, as the tone and guidelines are too strict (also that my english is quite below the required level for editorial writing), so that's why I'll just use my blog. We're going to use <strong>YSI 4</strong>, not the YSI 3.1 - that's very important distinction as a lot of thing changed, including file structure.  </p>

<h4 id="installation">Installation</h4>

<p>I'm going to assume your setup is similar to mine from <a href="http://misiur.github.io/2015/03/06/setting-up-your-pawn-environment/">previous pawn post</a>. That's the current project layout</p>

<p><img src="http://i.imgur.com/kPjI6tt.png" alt="Project layout as of last post"></p>

<p>You might see that my sublime doesn't display binary files, and that's ok. Anyhow, time to fetch the YSI. There is one issue though <br>
<img src="http://i.imgur.com/vZHjLXb.png" alt="Submodules">
See this folder with @ and revision hash next to it? This is a submodule. If you wanted to download the repository the standard way, the contents of that thingy won't be downloaded. So: fire up your git bash, and navigate to our <code>Resources</code> folder. Now run <br>
<code>git clone -b YSI.tl --single-branch --depth=1 --recursive https://github.com/Y-Less/YSI-Includes.git</code> (you can paste into git bash using <code>insert</code> button). Wait a while for files to download, and voila, latest YSI with its dependencies has been downloaded. Long story short: this command clones YSI-Includes repository, specifically a single branch - YSI.tl, and recurses through all dependencies downloading them. In the future to update to latest YSI just write <code>git pull</code> and it should work. Copy everything <strong>except files and folders starting with .git</strong> to your <code>Platform</code> and your new project. In your project folder type <code>git status</code> - if under untracked files you see pawno folder, double check that you've removed all .git* files from copied YSI.</p>

<h6 id="alldone">All done!</h6>

<p>Let's just test everything is hooked up properly and we can move on. Open up your main gamemode file, and write</p>

<pre><code>#include &lt;a_samp&gt;
#include &lt;YSI\y_va&gt;

main() {
    va_print("Hello world! %d %d %d", 1, 2, 3);
}
</code></pre>

<p>Then compile (<code>Tools -&gt; Build</code>, <code>f5</code>, or <code>ctrl+shift+p</code> and search <code>build</code>). The result should look like this <br>
<img src="http://i.imgur.com/9IGtoNg.png" alt="Build">
If for some reason the compilation doesn't seem to run at all, remove hard links of pawn compiler and replace them with standard copied files. No idea why this happens.</p>

<p>In next post I'll recommend some standard plugins, and we'll dig in into first YSI library, <strong>y_iterate</strong>.</p>]]></description><link>http://misiur.github.io/2015/03/07/getting-ready-for-ysi/</link><guid isPermaLink="false">d642b1f8-96c3-4c87-9462-a96894fa1d49</guid><category><![CDATA[PAWN]]></category><category><![CDATA[Sublime Text 3]]></category><category><![CDATA[Tutorials]]></category><dc:creator><![CDATA[Misiur]]></dc:creator><pubDate>Sat, 07 Mar 2015 16:28:46 GMT</pubDate></item><item><title><![CDATA[Buster for Windows]]></title><description><![CDATA[<p>This blog is powered by <a href="https://ghost.org">ghost</a>, pretty rad tool. However to get it running on github pages, you need a static version of your site. That's where <a href="https://github.com/axitkhurana/buster">buster</a> comes into play. It's a wrapper around wget, with few additional tasks for setting your website up.  </p>

<h5 id="sowhatsthedeal">So what's the deal?</h5>

<p>NTFS filesystems can't handle <code>?</code> in filenames. Nowadays assets are usually cached using query string (for example <code>asset/js/main.js?version=232314</code>). When scraping website with wget, if you stumble upon such file, and wget has flag <code>--restrict-file-name=unix</code> the file <strong>won't be downloaded at all</strong>. That's really annoying, because I thought it'd be simply encoded as <code>%3F</code>. I followed <a href="http://leftofnull.com/2014/02/24/using-github-pages-with-ghost-and-buster-on-windows-part-2/index.html">this tutorial</a>, however it seems wget for some reason applied rewrite to relative paths, even though it shouldn't with <code>restrict-file-name</code> flag (I'm using msys 1.0 wget version). So I made a little edit to latest buster version so rewrite won't happen at all, added safety measure against duplicate files, and released it as a bundle. </p>

<p><a href="https://github.com/Misiur/buster">Here you go</a>.</p>]]></description><link>http://misiur.github.io/2015/03/06/b/</link><guid isPermaLink="false">1455c1bb-a9e4-4fc8-8311-772db85f5ee4</guid><category><![CDATA[Python]]></category><category><![CDATA[Blog]]></category><dc:creator><![CDATA[Misiur]]></dc:creator><pubDate>Fri, 06 Mar 2015 19:32:36 GMT</pubDate></item><item><title><![CDATA[Setting up your PAWN environment]]></title><description><![CDATA[<p>If you want to write cool gamemodes, your work environment should be as comfortable as possible. I'll share my standard setup, suitable for work with multiple separate projects. This guide is specific for <strong>windows</strong>, but if you are running linux distro as your main OS, I guess you can handle that yourself.</p>

<p><strong>Update:</strong> It seems that I was wrong about windows symlinks, they aren't that terrible! Substitute every instance of "hard link" in this tutorial to "symlink". The link shell extension provides option to do that as well, and your links can now survive source updates.</p>

<h3 id="listofcontents">List of contents</h3>

<ol>
<li>Toolkit  </li>
<li>Folder layout  </li>
<li>Dependencies  </li>
<li>Editor  </li>
<li>Starting a new project</li>
</ol>

<h3 id="toolkit">Toolkit</h3>

<ol>
<li><a href="http://schinagl.priv.at/nt/hardlinkshellext/linkshellextension.html#download">Link shell extension</a> - unfortunately windows doesn't support symlinks as nicely as unix, and vagrant/docker is overkill for our purposes. We'll share most libraries across projects, and we won't have to worry about updating pawn libraries one by one.  </li>
<li><a href="http://www.sublimetext.com/3">Sublime text 3</a> - we'll go in-depth about that one later. It's free, but will nag you every now and then about buying it.  </li>
<li><a href="http://git-scm.com/downloads">Git for windows</a> - windows latest version is 1.9.5, 2 isn't ported yet as it requires a lot of hacks around POSIX libraries. Maybe one day...  </li>
<li><em>(optional)</em> <a href="https://www.virtualbox.org/">Virtualbox</a> + <a href="http://isoredirect.centos.org/centos/7/isos/x86_64/">CentOS x32</a> - most servers are working on CentOS, so we have to make sure that our server won't crash for some random reason. This one is optional though, you can go rough.</li>
</ol>

<p>Once you gather all required elements, let's start...</p>

<h3 id="folderlayout">Folder layout</h3>

<p>Being organised is a very important trait to have if you want to be a good developer. This is the most basic setup you can get.</p>

<pre><code>- Your root workbench folder
-- Template
-- Resources
-- Example project
</code></pre>

<p><code>Resources</code> folder will serve as a hub for keeping all PAWN libraries, and samp related things. <code>Template</code> will serve as a base for each new project. </p>

<h3 id="dependencies">Dependencies</h3>

<p>First, fetch yourself <a href="http://sa-mp.com/download.php">samp server for windows</a>. Save and extract it into your <code>Resources</code> folder. After doing that, select <code>samp-server.exe</code>, <code>samp-npc.exe</code>, <code>announce.exe</code> and <code>server.cfg</code>, then right-click and select "Use as link source". Enter your <code>Template</code> folder, right-click then select <code>Create link =&gt; Clone hard link</code>. Voila, now anytime you update your samp-server in <code>Resources</code>, the one in <code>Template</code> will be uploaded as well. </p>

<p>We need some directory initial directory structure. In <code>Template</code> create <code>pawno</code> folder with <code>include</code> subfolder. Also create standard folders:  <code>gamemodes</code>, <code>filterscripts</code>, <code>scriptfiles</code>, and <code>plugins</code>.</p>

<p>Go back to your server folder, enter <code>pawno/include</code>, select <strong>all</strong> files, and use them as a link source as we did with <code>samp-server.exe</code>. Then go into <code>Template/pawno/include</code> and create hard link of all includes here.</p>

<p>We <em>could</em> use standard compiler, but we won't as it has a whole bunch of known problems. <a href="https://github.com/Zeex/pawn/releases">Download latest pawncc release for windows</a> (don't download pawndisasm, as we don't need it). Select all files in the folder as a link source, and hard link them in your <code>Template/pawno</code>.</p>

<p>Your compiler is ready for work!</p>

<h3 id="editor">Editor</h3>

<p>You've probably already met PAWNO, the editor bundled with samp server. For beginners it's sufficient tool, but if you want to step up your game - you have to step up your editor as well. Introducing - <strong>sublime text 3</strong>. It's lightning fast, has great community base, and is my go-to multitool. This is not an editor course, but I can highly recommend <a href="http://code.tutsplus.com/articles/perfect-workflow-in-sublime-text-free-course--net-27293">this tutsplus.com article</a>. It made me realise how much my previous editor sucked (in fact I used two, heavy IDE for webdevelopment, notepad++ for everything else). Of course, sublime is my personal preference, there are hundreds of awesome tools available - <a href="https://atom.io/"><strong>Atom</strong> for example</a>.</p>

<p>You already should've installed it. We need to set it up for our PAWN development. <a href="https://github.com/Southclaw/pawn-sublime-language">Download this Southclaw pawn package</a>. In sublime menu select <code>Preferences =&gt; Browse packages</code>. Open <code>User</code> folder, and paste there the package (preferable in a folder, so you won't be confused with what is what).</p>

<p>Now download <a href="https://github.com/Misiur/sublime-pawn-build/releases">my default build system</a>, and paste it into your <code>User</code> folder as well.</p>

<p>Well done, now your environment is awesome!</p>

<h2 id="startinganewproject">Starting a new project</h2>

<p>Finally! All that setup will be reusable for each new project. How to start a new one?</p>

<ol>
<li><code>git bash</code> should be available in your start menu, fire it up.  </li>
<li>Navigate to your root folder (for me it would be <code>cd /d/Workbench</code>), and type: <code>git init &lt;name of your project&gt;</code> - keep the name short, as it will be the name of the project folder, for example <code>git init Foobar</code>. Don't close the console.  </li>
<li>Copy all contents of <code>Template</code> folder, and paste them into project folder. If you're wondering why we won't use hard links here, it's because sometimes updates will result in <a href="http://en.wikipedia.org/wiki/Backward_compatibility">BC break</a>. If you want bleeding-edge updates, hard link is the way to go, except <code>server.cfg</code> file.  </li>
<li>In sublime text open new window. Select <code>Project -&gt; Save project as...</code>, and save it in your new project folder. Then click <code>Project -&gt; Add Folder to project</code> and select your project folder again. Now you should have all files in left-side menu.  </li>
<li><p>Again in sublime, right-click top level folder, and select <code>New file</code>. Immediately save is as <code>.gitignore</code>. It's contents should be as follows:</p>

<pre><code>*
!*/
!.gitignore
!filterscripts/**/*
!gamemodes/**/*
*.amx
</code></pre></li>
<li><strong>Create main pwn file</strong>. Assuming your project name is <code>HWRP</code>, create a file named <code>gamemodes/HWRP.pwn</code> which will be your main pwn file.  </li>
<li><p>Dump some initial content into it:</p>

<pre><code>#include &lt;a_samp&gt;
main() {
    print("It seems everything works!");
}
</code></pre></li>
<li>Press <code>f5</code> - if you've done everything correctly, your amx should be ready!  </li>
<li>I hope you didn't close your git bash, because it's gonna be important now. Navigate into your project's main folder, and execute <code>git add .gitignore gamemodes/&lt;project name&gt;.pwn</code>, then <code>git commit -m "It seems I made a gamemode"</code>. Voila, you now entered the big league of tracking changes in your files. I'll explain what git does some other time.</li>
</ol>

<h3 id="conclusion">Conclusion</h3>

<p>That was a long process, but now your projects are not few scattered around HDD files, but properly managed, revisioned and structured files. If you stick around with my blog, you'll learn both PAWN and sublime text tricks, YSI library usage, and maybe we'll write some simple gamemode.</p>

<p>Thanks for reading!</p>]]></description><link>http://misiur.github.io/2015/03/06/setting-up-your-pawn-environment/</link><guid isPermaLink="false">02ed9496-1a44-4fc6-a88c-fb74d2626811</guid><category><![CDATA[PAWN]]></category><category><![CDATA[Sublime Text 3]]></category><category><![CDATA[Tutorials]]></category><dc:creator><![CDATA[Misiur]]></dc:creator><pubDate>Fri, 06 Mar 2015 18:38:40 GMT</pubDate></item><item><title><![CDATA[Hello world]]></title><description><![CDATA[<p>Well, it's finally time for me to start a blog. Years of gathered programming quirks, which I'm certain should be known by more people. Expect new content soon!</p>]]></description><link>http://misiur.github.io/2015/03/06/hello-world/</link><guid isPermaLink="false">e0fb39eb-a88a-4258-89e4-177c8e50f408</guid><category><![CDATA[General]]></category><dc:creator><![CDATA[Misiur]]></dc:creator><pubDate>Fri, 06 Mar 2015 13:37:09 GMT</pubDate></item></channel></rss>